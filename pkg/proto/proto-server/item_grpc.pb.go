// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: pkg/proto/item/item.proto

package proto_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ItemService_FindItems_FullMethodName = "/ItemService/FindItems"
)

// ItemServiceClient is the client API for ItemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ItemServiceClient interface {
	FindItems(ctx context.Context, opts ...grpc.CallOption) (ItemService_FindItemsClient, error)
}

type itemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewItemServiceClient(cc grpc.ClientConnInterface) ItemServiceClient {
	return &itemServiceClient{cc}
}

func (c *itemServiceClient) FindItems(ctx context.Context, opts ...grpc.CallOption) (ItemService_FindItemsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ItemService_ServiceDesc.Streams[0], ItemService_FindItems_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &itemServiceFindItemsClient{stream}
	return x, nil
}

type ItemService_FindItemsClient interface {
	Send(*ItemRequest) error
	CloseAndRecv() (*ItemsList, error)
	grpc.ClientStream
}

type itemServiceFindItemsClient struct {
	grpc.ClientStream
}

func (x *itemServiceFindItemsClient) Send(m *ItemRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *itemServiceFindItemsClient) CloseAndRecv() (*ItemsList, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ItemsList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ItemServiceServer is the server API for ItemService service.
// All implementations must embed UnimplementedItemServiceServer
// for forward compatibility
type ItemServiceServer interface {
	FindItems(ItemService_FindItemsServer) error
	mustEmbedUnimplementedItemServiceServer()
}

// UnimplementedItemServiceServer must be embedded to have forward compatible implementations.
type UnimplementedItemServiceServer struct {
}

func (UnimplementedItemServiceServer) FindItems(ItemService_FindItemsServer) error {
	return status.Errorf(codes.Unimplemented, "method FindItems not implemented")
}
func (UnimplementedItemServiceServer) mustEmbedUnimplementedItemServiceServer() {}

// UnsafeItemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ItemServiceServer will
// result in compilation errors.
type UnsafeItemServiceServer interface {
	mustEmbedUnimplementedItemServiceServer()
}

func RegisterItemServiceServer(s grpc.ServiceRegistrar, srv ItemServiceServer) {
	s.RegisterService(&ItemService_ServiceDesc, srv)
}

func _ItemService_FindItems_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ItemServiceServer).FindItems(&itemServiceFindItemsServer{stream})
}

type ItemService_FindItemsServer interface {
	SendAndClose(*ItemsList) error
	Recv() (*ItemRequest, error)
	grpc.ServerStream
}

type itemServiceFindItemsServer struct {
	grpc.ServerStream
}

func (x *itemServiceFindItemsServer) SendAndClose(m *ItemsList) error {
	return x.ServerStream.SendMsg(m)
}

func (x *itemServiceFindItemsServer) Recv() (*ItemRequest, error) {
	m := new(ItemRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ItemService_ServiceDesc is the grpc.ServiceDesc for ItemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ItemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ItemService",
	HandlerType: (*ItemServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FindItems",
			Handler:       _ItemService_FindItems_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/proto/item/item.proto",
}
